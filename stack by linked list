class StackUsingLinkedList {
    private class Node {
        int data;
        Node next;
        Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    private Node top; 

    public StackUsingLinkedList() {
        this.top = null;
    }
    public void push(int value) {
        Node newNode = new Node(value);
        newNode.next = top; 
        top = newNode; 
    }
    public int pop() {
        if (isEmpty()) {
            throw new RuntimeException("Stack Underflow - cannot pop from empty stack");
        }
        int poppedValue = top.data;
        top = top.next; 
        return poppedValue;
    }
    public int peek() {
        if (isEmpty()) {
            throw new RuntimeException("Stack is empty");
        }
        return top.data;
    }
    public boolean isEmpty() {
        return top == null;
    }
    public void printStack() {
        Node current = top;
        System.out.print("Stack: ");
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
    public static void main(String[] args) {
        StackUsingLinkedList stack = new StackUsingLinkedList();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        stack.printStack(); 

        System.out.println("Top element is: " + stack.peek()); 
        System.out.println("Popped: " + stack.pop()); 
        stack.printStack();

        System.out.println("Is empty? " + stack.isEmpty());
    }
}
